# exercicio4.py

# Lista global que armazena as peÃ§as cadastradas
pecas = []

def gerar_codigo():
    """
    Gera o prÃ³ximo cÃ³digo para uma nova peÃ§a.
    Se a lista estiver vazia, retorna 1.
    Caso contrÃ¡rio, retorna o Ãºltimo cÃ³digo + 1.
    """
    if not pecas:
        return 1
    return pecas[-1]["codigo"] + 1


def cadastrar_peca(nome, fabricante, valor):
    """
    Cadastra uma nova peÃ§a na lista global 'pecas'.
    """
    codigo = gerar_codigo()
    nova_peca = {
        "codigo": codigo,
        "nome": nome,
        "fabricante": fabricante,
        "valor": valor
    }
    pecas.append(nova_peca)
    return nova_peca


def consultar_pecas():
    """
    Retorna a lista de peÃ§as cadastradas.
    """
    return pecas


def remover_peca(codigo):
    """
    Remove uma peÃ§a pelo cÃ³digo.
    Retorna True se removeu, False se nÃ£o encontrou.
    """
    for p in pecas:
        if p["codigo"] == codigo:
            pecas.remove(p)
            return True
    return False


def main():
    while True:
        print("\n=== MENU PEÃ‡AS ===")
        print("1 - Cadastrar peÃ§a")
        print("2 - Consultar peÃ§as")
        print("3 - Remover peÃ§a")
        print("4 - Sair")
        opcao = input("Escolha uma opÃ§Ã£o: ")

        if opcao == "1":
            nome = input("Nome da peÃ§a: ")
            fabricante = input("Fabricante: ")
            valor = float(input("Valor: "))
            nova = cadastrar_peca(nome, fabricante, valor)
            print(f"PeÃ§a cadastrada: {nova}")

        elif opcao == "2":
            for p in consultar_pecas():
                print(p)

        elif opcao == "3":
            codigo = int(input("CÃ³digo da peÃ§a a remover: "))
            if remover_peca(codigo):
                print("PeÃ§a removida com sucesso.")
            else:
                print("PeÃ§a nÃ£o encontrada.")

        elif opcao == "4":
            print("Saindo...")
            break
        else:
            print("OpÃ§Ã£o invÃ¡lida.")


if __name__ == "__main__":
    main()

# Explicando por meio visual 

"""
ğŸ”§ Sistema de Cadastro de PeÃ§as â€“ DocumentaÃ§Ã£o em Tabela

ğŸ“Š VisÃ£o Geral
Este programa permite cadastrar, consultar e remover peÃ§as de uma lista global chamada `pecas`.
Cada peÃ§a possui: cÃ³digo, nome, fabricante e valor.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ğŸ“Œ Estrutura das FunÃ§Ãµes

| FunÃ§Ã£o / Parte do cÃ³digo | O que faz                                                                 | Exemplo de uso                                                                 |
|---------------------------|---------------------------------------------------------------------------|--------------------------------------------------------------------------------|
| pecas = []               | Lista global que armazena todas as peÃ§as cadastradas.                     | ApÃ³s cadastrar, pecas = [{"codigo": 1, "nome": "PeÃ§a A", ...}]                 |
| gerar_codigo()           | Gera o prÃ³ximo cÃ³digo automaticamente. Se lista vazia â†’ 1, senÃ£o Ãºltimo+1 | Lista vazia â†’ retorna 1 ; Lista com Ãºltima peÃ§a cÃ³digo=3 â†’ retorna 4           |
| cadastrar_peca(...)      | Cria um dicionÃ¡rio com dados da peÃ§a e adiciona Ã  lista global.           | cadastrar_peca("PeÃ§a A","Fab X",10.0) â†’ {"codigo":1,"nome":"PeÃ§a A",...}      |
| consultar_pecas()        | Retorna a lista completa de peÃ§as cadastradas.                            | Se houver 2 peÃ§as, retorna lista com 2 dicionÃ¡rios.                            |
| remover_peca(codigo)     | Remove peÃ§a pelo cÃ³digo. Retorna True se removeu, False se nÃ£o encontrou. | remover_peca(1) â†’ True (se existir) ; remover_peca(99) â†’ False                 |
| main()                   | Exibe menu interativo para o usuÃ¡rio cadastrar, consultar ou remover.     | UsuÃ¡rio escolhe opÃ§Ã£o 1 â†’ cadastra peÃ§a ; opÃ§Ã£o 2 â†’ lista peÃ§as ; opÃ§Ã£o 3 â†’ remove |
| if __name__ == "__main__"| Executa o programa apenas se rodado diretamente.                          | python exercicio4.py â†’ inicia o menu                                           |

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ğŸ“Š Fluxo do Menu (main)

1 - Cadastrar peÃ§a  
   â†’ Solicita nome, fabricante e valor.  
   â†’ Gera cÃ³digo automÃ¡tico.  
   â†’ Adiciona peÃ§a Ã  lista.  

2 - Consultar peÃ§as  
   â†’ Percorre a lista `pecas` e imprime cada peÃ§a cadastrada.  

3 - Remover peÃ§a  
   â†’ Solicita cÃ³digo.  
   â†’ Se existir, remove e mostra mensagem de sucesso.  
   â†’ Se nÃ£o existir, mostra mensagem de erro.  

4 - Sair  
   â†’ Encerra o programa.  

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ… InterpretaÃ§Ã£o
- O programa funciona como um pequeno **sistema de estoque**.  
- Cada peÃ§a Ã© representada por um dicionÃ¡rio com cÃ³digo, nome, fabricante e valor.  
- O cÃ³digo Ã© gerado automaticamente para evitar duplicidade.  
- O menu interativo permite ao usuÃ¡rio manipular a lista de peÃ§as de forma simples.
"""

# Explicando por meio linha de cÃ³digo

"""
ğŸ”§ Sistema de Cadastro de PeÃ§as â€“ DocumentaÃ§Ã£o linha a linha

# Lista global que armazena as peÃ§as cadastradas
pecas = []
â†’ Cria uma lista vazia chamada `pecas`, que serÃ¡ usada para armazenar dicionÃ¡rios de peÃ§as.

def gerar_codigo():
    â†’ Define a funÃ§Ã£o que gera o prÃ³ximo cÃ³digo automaticamente.
    if not pecas:
        â†’ Se a lista estiver vazia, retorna 1 (primeira peÃ§a).
        return 1
    return pecas[-1]["codigo"] + 1
        â†’ Caso contrÃ¡rio, pega o Ãºltimo cÃ³digo da lista e soma 1.

def cadastrar_peca(nome, fabricante, valor):
    â†’ Define a funÃ§Ã£o que cadastra uma nova peÃ§a.
    codigo = gerar_codigo()
        â†’ Gera automaticamente o cÃ³digo da peÃ§a.
    nova_peca = {"codigo": codigo, "nome": nome, "fabricante": fabricante, "valor": valor}
        â†’ Cria um dicionÃ¡rio com os dados da peÃ§a.
    pecas.append(nova_peca)
        â†’ Adiciona a peÃ§a Ã  lista global.
    return nova_peca
        â†’ Retorna o dicionÃ¡rio da peÃ§a cadastrada.

def consultar_pecas():
    â†’ Retorna a lista completa de peÃ§as cadastradas.
    return pecas

def remover_peca(codigo):
    â†’ Define a funÃ§Ã£o que remove uma peÃ§a pelo cÃ³digo.
    for p in pecas:
        â†’ Percorre todas as peÃ§as cadastradas.
        if p["codigo"] == codigo:
            â†’ Se encontrar a peÃ§a com o cÃ³digo informado:
            pecas.remove(p)
                â†’ Remove a peÃ§a da lista.
            return True
                â†’ Retorna True indicando sucesso.
    return False
        â†’ Se nÃ£o encontrar, retorna False.

def main():
    â†’ FunÃ§Ã£o principal que exibe o menu interativo.
    while True:
        â†’ Loop infinito atÃ© o usuÃ¡rio escolher sair.
        print("\n=== MENU PEÃ‡AS ===")
            â†’ Exibe o tÃ­tulo do menu.
        print("1 - Cadastrar peÃ§a")
        print("2 - Consultar peÃ§as")
        print("3 - Remover peÃ§a")
        print("4 - Sair")
        opcao = input("Escolha uma opÃ§Ã£o: ")
            â†’ LÃª a opÃ§Ã£o digitada pelo usuÃ¡rio.

        if opcao == "1":
            â†’ Se o usuÃ¡rio escolher cadastrar:
            nome = input("Nome da peÃ§a: ")
            fabricante = input("Fabricante: ")
            valor = float(input("Valor: "))
                â†’ Solicita os dados da peÃ§a.
            nova = cadastrar_peca(nome, fabricante, valor)
                â†’ Cadastra a peÃ§a chamando a funÃ§Ã£o.
            print(f"PeÃ§a cadastrada: {nova}")
                â†’ Mostra a peÃ§a cadastrada.

        elif opcao == "2":
            â†’ Se o usuÃ¡rio escolher consultar:
            for p in consultar_pecas():
                print(p)
                â†’ Imprime cada peÃ§a cadastrada.

        elif opcao == "3":
            â†’ Se o usuÃ¡rio escolher remover:
            codigo = int(input("CÃ³digo da peÃ§a a remover: "))
                â†’ Solicita o cÃ³digo da peÃ§a.
            if remover_peca(codigo):
                print("PeÃ§a removida com sucesso.")
            else:
                print("PeÃ§a nÃ£o encontrada.")

        elif opcao == "4":
            â†’ Se o usuÃ¡rio escolher sair:
            print("Saindo...")
            break
                â†’ Encerra o loop e finaliza o programa.

        else:
            â†’ Se o usuÃ¡rio digitar uma opÃ§Ã£o invÃ¡lida:
            print("OpÃ§Ã£o invÃ¡lida.")

if __name__ == "__main__":
    main()
    â†’ Executa a funÃ§Ã£o principal apenas se o arquivo for rodado diretamente.
"""