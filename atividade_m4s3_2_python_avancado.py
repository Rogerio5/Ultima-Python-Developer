# exercicio2.py

CARDAPIO = {
    "100": {"nome": "Cachorro Quente", "preco": 9.0},
    "101": {"nome": "X-Salada", "preco": 12.0},
    "102": {"nome": "X-Bacon", "preco": 15.0},
    "103": {"nome": "Misto Quente", "preco": 11.0},
    "104": {"nome": "P√£o na Chapa", "preco": 5.0},
    "200": {"nome": "Refrigerante Lata", "preco": 6.0},
    "201": {"nome": "Ch√° Gelado", "preco": 5.0},
}

def calcular_total(pedidos, cardapio=CARDAPIO):
    """
    Recebe uma lista de tuplas (codigo, quantidade) e devolve o total.
    Ignora c√≥digos inexistentes.
    """
    total = 0.0
    for codigo, qtd in pedidos:
        item = cardapio.get(str(codigo))
        if item and qtd > 0:
            total += item["preco"] * qtd
    return round(total, 2)

def formatar_item(codigo, cardapio=CARDAPIO):
    """Retorna uma string formatada 'codigo - nome - preco' ou mensagem de inv√°lido."""
    item = cardapio.get(str(codigo))
    if not item:
        return f"C√≥digo {codigo} inv√°lido."
    return f"{codigo} - {item['nome']} - R$ {item['preco']:.2f}"

def imprimir_cardapio(cardapio=CARDAPIO):
    print("=== CARD√ÅPIO ===")
    for codigo in sorted(cardapio.keys()):
        print(formatar_item(codigo, cardapio))

def main():
    imprimir_cardapio()
    print("\nDigite os pedidos (c√≥digo e quantidade). Enter vazio para finalizar.")
    pedidos = []
    while True:
        codigo = input("C√≥digo: ").strip()
        if not codigo:
            break
        qtd_str = input("Quantidade: ").strip()
        if not qtd_str:
            break
        try:
            qtd = int(qtd_str)
        except ValueError:
            print("Quantidade inv√°lida, tente novamente.")
            continue
        if str(codigo) not in CARDAPIO:
            print("C√≥digo inv√°lido, tente novamente.")
            continue
        pedidos.append((codigo, qtd))

    total = calcular_total(pedidos, CARDAPIO)
    print(f"\nTotal: R$ {total:.2f}")

if __name__ == "__main__":
    main()

# Explicando em meio visual

"""
üçî Sistema de Lanchonete ‚Äì Documenta√ß√£o

Este programa simula um card√°pio de lanchonete, permitindo ao usu√°rio escolher itens pelo c√≥digo,
informar quantidades e calcular o valor total da compra.

üìä Estrutura explicada em tabela:

| Parte do c√≥digo                  | O que faz                                                                 | Exemplo pr√°tico                                                                 |
|----------------------------------|---------------------------------------------------------------------------|---------------------------------------------------------------------------------|
| CARDAPIO                         | Dicion√°rio com os itens dispon√≠veis (c√≥digo, nome e pre√ßo).               | "100": {"nome": "Cachorro Quente", "preco": 9.0} ‚Üí c√≥digo 100 = Cachorro Quente |
| calcular_total(pedidos)          | Recebe lista de tuplas (c√≥digo, quantidade) e soma os valores.            | [("100", 2), ("101", 1)] ‚Üí 2*9 + 1*12 = 30                                      |
| formatar_item(codigo)            | Retorna string formatada "codigo - nome - preco" ou mensagem de inv√°lido. | formatar_item("100") ‚Üí "100 - Cachorro Quente - R$ 9.00"                        |
| imprimir_cardapio()              | Mostra todos os itens do card√°pio na tela.                                | Exibe todos os c√≥digos e pre√ßos ordenados.                                      |
| main()                           | Fluxo principal: imprime card√°pio, l√™ pedidos, calcula e mostra o total.  | Usu√°rio digita 100 (2 unid) + 200 (1 unid) ‚Üí Total R$ 24.00                     |
| if __name__ == "__main__": main()| Garante que o programa s√≥ roda o main se for executado diretamente.       | python arquivo.py ‚Üí abre o card√°pio e pede pedidos.                             |

üöÄ Como interpretar:
- O programa usa o CARD√ÅPIO como base de dados.
- O c√°lculo do total ignora c√≥digos inv√°lidos ou quantidades negativas.
- A intera√ß√£o com o usu√°rio √© feita no `main`, mas as fun√ß√µes podem ser testadas isoladamente.
- Ideal para treinar testes unit√°rios com pytest:
  - Testar `calcular_total` com pedidos v√°lidos, inv√°lidos e mistos.
  - Testar `formatar_item` com c√≥digos existentes e inexistentes.
  - Testar `imprimir_cardapio` capturando a sa√≠da.
"""

# Explicando por meio da linha de c√≥digo

"""
üçî Sistema de Lanchonete ‚Äì Documenta√ß√£o linha a linha

CARD√ÅPIO = {...}
    ‚Üí Dicion√°rio que guarda os itens dispon√≠veis, cada um com c√≥digo, nome e pre√ßo.

def calcular_total(pedidos, cardapio=CARDAPIO):
    ‚Üí Define a fun√ß√£o que calcula o valor total de uma lista de pedidos.

    total = 0.0
        ‚Üí Inicializa o acumulador do valor total em 0.

    for codigo, qtd in pedidos:
        ‚Üí Percorre cada pedido recebido (c√≥digo e quantidade).

        item = cardapio.get(str(codigo))
            ‚Üí Busca o item no card√°pio pelo c√≥digo informado.

        if item and qtd > 0:
            ‚Üí Verifica se o c√≥digo existe e se a quantidade √© v√°lida (>0).

            total += item["preco"] * qtd
                ‚Üí Soma ao total o pre√ßo do item multiplicado pela quantidade.

    return round(total, 2)
        ‚Üí Retorna o valor total arredondado com 2 casas decimais.


def formatar_item(codigo, cardapio=CARDAPIO):
    ‚Üí Define a fun√ß√£o que formata a exibi√ß√£o de um item do card√°pio.

    item = cardapio.get(str(codigo))
        ‚Üí Busca o item no card√°pio.

    if not item:
        ‚Üí Se n√£o encontrar, retorna mensagem de inv√°lido.

        return f"C√≥digo {codigo} inv√°lido."

    return f"{codigo} - {item['nome']} - R$ {item['preco']:.2f}"
        ‚Üí Caso exista, retorna string formatada com c√≥digo, nome e pre√ßo.


def imprimir_cardapio(cardapio=CARDAPIO):
    ‚Üí Define a fun√ß√£o que imprime o card√°pio completo.

    print("=== CARD√ÅPIO ===")
        ‚Üí Exibe t√≠tulo do card√°pio.

    for codigo in sorted(cardapio.keys()):
        ‚Üí Percorre os c√≥digos em ordem crescente.

        print(formatar_item(codigo, cardapio))
            ‚Üí Imprime cada item formatado.


def main():
    ‚Üí Fun√ß√£o principal que organiza o fluxo do programa.

    imprimir_cardapio()
        ‚Üí Mostra o card√°pio na tela.

    print("\nDigite os pedidos (c√≥digo e quantidade). Enter vazio para finalizar.")
        ‚Üí Instrui o usu√°rio sobre como inserir pedidos.

    pedidos = []
        ‚Üí Cria lista vazia para armazenar os pedidos.

    while True:
        ‚Üí Loop infinito at√© o usu√°rio parar.

        codigo = input("C√≥digo: ").strip()
            ‚Üí Pede o c√≥digo do item.

        if not codigo:
            ‚Üí Se o usu√°rio n√£o digitar nada, encerra o loop.

            break

        qtd_str = input("Quantidade: ").strip()
            ‚Üí Pede a quantidade.

        if not qtd_str:
            ‚Üí Se n√£o digitar nada, encerra o loop.

            break

        try:
            qtd = int(qtd_str)
                ‚Üí Converte a quantidade para n√∫mero inteiro.
        except ValueError:
            ‚Üí Se n√£o for n√∫mero, mostra erro.

            print("Quantidade inv√°lida, tente novamente.")
            continue

        if str(codigo) not in CARDAPIO:
            ‚Üí Se o c√≥digo n√£o existir no card√°pio, mostra erro.

            print("C√≥digo inv√°lido, tente novamente.")
            continue

        pedidos.append((codigo, qtd))
            ‚Üí Adiciona o pedido v√°lido √† lista.

    total = calcular_total(pedidos, CARDAPIO)
        ‚Üí Calcula o valor total dos pedidos.

    print(f"\nTotal: R$ {total:.2f}")
        ‚Üí Exibe o valor final formatado.


if __name__ == "__main__":
    main()
        ‚Üí Executa a fun√ß√£o principal apenas se o arquivo for rodado diretamente.
"""